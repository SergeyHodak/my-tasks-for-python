def split_pairs(a):
    """
    Разделите строку на пары из двух символов. Если строка содержит нечетное
    количество символов, пропущенный второй символ последней пары должен быть
    заменен подчеркиванием ('_').
    """
    c = []  # контейнер для выдачи результата
    if len(a) % 2 == 0:  # если количество символов в "a" делится на "2" без остатка
        b = 0  # индикатор для цикла
        while b < len(a):  # пока индикатор меньше количества полученных символов
            c.append(a[b:b+2])  # добавить два символа на вывод
            b += 2  # повышение индикатора
        return c  # выдать результат
    else:  # делится на 2 с остатком
        b = int(len(a)/2)+1  # индикатор для цикла, количество пар
        d = 0  # шагатель
        while b != 0:  # пока индикатор пар не пустой
            if b != 1:  # эсли это не последняя пара
                c.append(a[d:d+2])  # добавить два символа на вывод
                d += 2  # повышение индикатора
                b -= 1  # снижение количества оставшихся пар
            else:  # последняя
                c.append(a[d]+"_")  # добавить два символа на вывод
                d += 2  # повышение индикатора
                b -= 1  # снижение количества оставшихся пар
        return c  # выдать результат
                  
                
if __name__ == '__main__':
    print("Пример:")
    print(list(split_pairs('abcd')))
    
    # Эти "asserts" используются для самопроверки, а не для автоматического тестирования.
    assert list(split_pairs('abcd')) == ['ab', 'cd']
    assert list(split_pairs('abc')) == ['ab', 'c_']
    assert list(split_pairs('abcdf')) == ['ab', 'cd', 'f_']
    assert list(split_pairs('a')) == ['a_']
    assert list(split_pairs('')) == []
    print("Кодирование завершено? Нажмите 'Check', чтобы получить отличные награды!")
