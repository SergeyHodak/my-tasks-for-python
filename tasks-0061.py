def words_order(text: str, words: list) -> bool:
    """
    У вас есть текст и список слов. Вам нужно проверить, появляются ли слова в списке в том же порядке,
    что и в данном тексте. Случаев, которых следует ожидать при решении этой задачи:
    -    слова из списка нет в тексте - ваша функция должна вернуть False;
    -    любое слово может встречаться в тексте более одного раза - используйте только первое;
    +    два слова в данном списке совпадают - ваша функция должна возвращать False;
    -    условие чувствительно к регистру, что означает, что «привет» и «Привет» - два разных слова;
    -   текст состоит только из английских букв и пробелов.
    Вход: два аргумента. Первый - заданный текст, второй - список слов.
    """
    # предпологаю можно создать список вхождений слов индексами
    # и потом отдельно его отсортировать и сравнить с отсортированным и не отсортированным
    if len(words) == 1:  # если список слов имеет одно слово
        if words[0] not in text:  # если этого слова нету в заданном тексте
            return False  # фальш, слова нету
        else:  # слово все таки есть
            return True  # правда, слово есть
    elif len(words) == 2:  # если список слов имеет два слова
        if words[0] == words[1]:  # если первое и второе слово между собой равны
            return False  # возвращаем ложное мнение, так как два одинаковых слова в списке слов
        else:  # слова между собой разные
            if words[0] not in text.split( ):  # если первое слово в заданном тексте отсутствует
                return False  # возвращаем ложное мнение, так как первого слова нету в заданном тексте
            elif words[1] not in text.split( ):  # если второе слово в заданном тексте отсутствует
                return False  # возвращаем ложное мнение, так как второго слова нету в заданном тексте
            else:  # искомые слова присутствуют в заданном тексте
                a = text.split( )  # разбить по пробелу
                b = []  # пустой список для сравнения
                for i in range(0, len(a)):  # пробежка по словам заданного текста, в поисках первого
                    if a[i] == words[0]:  # если в поциции нашло то слово которое равно первому искомому
                        b += [i]  # записать позицию слова, первого если их более одного
                        break  # прервать цикл фор
                for i in range(0, len(a)):  # пробежка по словам заданного текста, в поисках второго
                    if a[i] == words[1]:  # если в поциции нашло то слово которое равно второму искомому
                        b += [i]  # записать позицию слова, второго если их более одного
                        break  # прервать цикл фор
                if b[0] < b[1]:  # ели расположение слов в заданном тексте по поочередности совпадает с списком слов
                    return True  # возвращаем "правда", слова в тексте в такой же поочередности как и в искомом
                else:  # другая поочередность
                    return False  # фальш - не правда
    elif len(words) == 3:  # если список слов имеет три слова
        a = text.split()  # разбить по пробелу
        b = []  # пустой список для сравнения
        for i in range(0, 3):  # пробежка три раза
            for j in range(0, len(a)):  # пробежка по словам заданного текста, в поисках "i"
                if a[j] == words[i]:  # если в поциции нашло то слово которое равно позиции "i" искомому
                    b += [j]  # записать позицию слова, первого если их более одного
                    break  # прервать цикл фор
        if b[0] < b[1] < b[2]:  # если это равенство выполнилось
            return True  # правда
        else:  # равенство не выполнено
            return False  # не правда


if __name__ == '__main__':
    print("Пример:")
    print(words_order('hi world im here', ['world', 'world']))  # фальш, два одинаковых в списке слов
    print(words_order('hi world im here', ['country', 'world']))  # фальш, первого слова нету в заданном тексте
    print(words_order('hi world im here', ['world', 'here']))  # правда
    print(words_order('hi world im here', ['here', 'world']))  # фальш, поочередность не соответствует
    print(words_order('', ['world', 'here']))  # фальш, первого слова нету в заданном тексте
    print(words_order('hi world im here', ['world']))  # правда, стово присутствует в тексте
    print(words_order('hi world im here', ['world', 'here', 'hi']))  # False, не совпадение поочередности

    # Эти "asserts" используются только для самопроверки и не требуются для автоматического тестирования.
    assert words_order('hi world im here', ['world', 'here']) == True
    assert words_order('hi world im here', ['here', 'world']) == False
    assert words_order('hi world im here', ['world']) == True
    assert words_order('hi world im here', ['world', 'here', 'hi']) == False
    assert words_order('hi world im here', ['world', 'im', 'here']) == True
    assert words_order('hi world im here', ['world', 'hi', 'here']) == False
    assert words_order('hi world im here', ['world', 'world']) == False
    assert words_order('hi world im here', ['country', 'world']) == False
    assert words_order('hi world im here', ['wo', 'rld']) == False
    assert words_order('', ['world', 'here']) == False
    print("Кодирование завершено? Нажмите 'Check', чтобы получить отличные награды!")