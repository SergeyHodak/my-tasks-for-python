"""
    Отсортируйте числа в массиве. Но положение нулей менять не стоит.
"""
from typing import Iterable


def except_zero(items: list) -> Iterable:
    a = []  # пустой список для формулировки отсортированного без нулей
    for i in range(0, len(items)):  # пробежка
        if items[i] != 0:  # если в позиции не ноль
            a.append(items[i])  # записать на сортировку
    a = sorted(a)  # отсортировать
    b = 0  # шагатель
    c = []  # пустой список на выдачу
    for i in range(0, len(items)):  # пробежка
        if items[i] == 0:  # если в позиции ноль
            c.append(0)  # записываем ноль
        else:  # если в позиции не ноль
            c.append(a[b])  # записываем значение из отсортированного списка
            b += 1  # повышаем шагатель
    return c  # выдаем результат


if __name__ == '__main__':
    print("Пример:")
    print(list(except_zero([5, 3, 0, 0, 4, 1, 4, 0, 7])))

    # Эти "asserts" используются для самопроверки, а не для автоматического тестирования.
    assert list(except_zero([5, 3, 0, 0, 4, 1, 4, 0, 7])) == [1, 3, 0, 0, 4, 4, 5, 0, 7]
    assert list(except_zero([0, 2, 3, 1, 0, 4, 5])) == [0, 1, 2, 3, 0, 4, 5]
    assert list(except_zero([0, 0, 0, 1, 0])) == [0, 0, 0, 1, 0]
    assert list(except_zero([4, 5, 3, 1, 1])) == [1, 1, 3, 4, 5]
    assert list(except_zero([0, 0])) == [0, 0]
    print("Кодирование завершено? Нажмите 'Check', чтобы получить отличные награды!")