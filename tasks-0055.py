"""
    Ты когда нибудь слышал о таком языке разметки как YAML? Он представляет собой дружественный формат
    сериализации данных. На столько дружественный, что его стало удобно читать и людям и программам.
    YAML - это текст, а вам надо преобразовать его в объект. Но я не прошу вас реализовывать весь
    стандарт YAML, мы будем реализовывать его шаг за шагом.
    Первый шаг - это преобразование ключ-значение. Ключом может быть любая строка, из латинских букв и цифр.
    Значением может быть однострочная строка (которая состоит из пробелов, латинских букв и цифр) или число (int).
    Покажу несколько примеров:
    name: Alex
    age: 12
    Преобразуется в объект.
        {
            "name": "Alex",
            "age": 12
        }
    Обратите внимание, что число автоматически получило тип int.
    Еще один пример показывает, что строка может содержать пробелы:
    name: Alex Fox
    age: 12

    class: 12b
    Будет преобразован в следующий объект.
        {
            "age": 12,
            "name": "Alex Fox",
            "class": "12b"
        }
    Обратите внимание на несколько вещей. Между строкой "age" и строкой "class" есть пустая строка, которая
    не мешает парсингу. Класс начинается с цифр, но имеет буквы, а значит не может быть преобразован в цифры,
    поэтому его тип остался строкой (str).
"""


def yaml(a):


if __name__ == '__main__':
    print("Пример:")
    print(yaml("""name: Alex
                  age: 12"""))

    # Эти "asserts" используются только для самопроверки и не требуются для автоматического тестирования.
    assert yaml("""name: Alex
                   age: 12""") == {'age': 12, 'name': 'Alex'}
    assert yaml("""name: Alex Fox
                   age: 12

                   class: 12b""") == {'age': 12,
                                      'class': '12b',
                                      'name': 'Alex Fox'}
    print("Кодирование завершено? Нажмите 'Check', чтобы получить отличные награды!")