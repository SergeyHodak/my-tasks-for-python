"""
    Ты когда нибудь слышал о таком языке разметки как YAML? Он представляет собой дружественный формат
    сериализации данных. На столько дружественный, что его стало удобно читать и людям и программам.
    YAML - это текст, а вам надо преобразовать его в объект. Но я не прошу вас реализовывать весь
    стандарт YAML, мы будем реализовывать его шаг за шагом.
    Первый шаг - это преобразование ключ-значение. Ключом может быть любая строка, из латинских букв и цифр.
    Значением может быть однострочная строка (которая состоит из пробелов, латинских букв и цифр) или число (int).
    Покажу несколько примеров:
    name: Alex
    age: 12
    Преобразуется в объект.
        {
            "name": "Alex",
            "age": 12
        }
    Обратите внимание, что число автоматически получило тип int.
    Еще один пример показывает, что строка может содержать пробелы:
    name: Alex Fox
    age: 12

    class: 12b
    Будет преобразован в следующий объект.
        {
            "age": 12,
            "name": "Alex Fox",
            "class": "12b"
        }
    Обратите внимание на несколько вещей. Между строкой "age" и строкой "class" есть пустая строка, которая
    не мешает парсингу. Класс начинается с цифр, но имеет буквы, а значит не может быть преобразован в цифры,
    поэтому его тип остался строкой (str).
"""


def yaml(a):
    # значит тайво, разбить по /n потом по : и записать в словарь выдать результат
    a = sorted(a.split("\n"))  # получаем список, результат деления преносом на новую строку, +сортировка
    b = {}  # пустой словарь для вывода результата
    for i in range(0, len(a)):  # пробежка
        import re  # вставляем модуль re для работы с регулярными выражениями
        if re.match("[ ]+$", a[i]):  # наличие только пробелов во всей строке. [тут то что должно присутствовать]
            pass  # пропустить ход
        elif len(a[i]) == 0:  # если строка пустая
            pass  # пропустить ход
        else:  # строка с данными
            c = a[i].split(":")  # разбить по двоеточию
            if c[1].strip().isdigit():  # если только числа
                b[c[0].strip()] = int(c[1].strip())  # записать ключ и значение к нему заинтовать
            else:  # если чисел нету
                b[c[0].strip()] = c[1].strip()  # + в словарь по (ключу, значение), убрав все пробели в начале и в конце
    return b  # выдать результат


if __name__ == '__main__':
    print("Пример:")
    print(yaml("""name: Alex\nage: 12"""))
    print(yaml("name: Alex Fox\nage: 12\n\nclass: 12b"))

    # Эти "asserts" используются только для самопроверки и не требуются для автоматического тестирования.
    assert yaml("""name: Alex\nage: 12""") == {'age': 12, 'name': 'Alex'}
    assert yaml("""name: Alex Fox\nage: 12\n \nclass: 12b""") == {'age': 12, 'class': '12b', 'name': 'Alex Fox'}
    print("Кодирование завершено? Нажмите 'Check', чтобы получить отличные награды!")