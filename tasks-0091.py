"""
    Предварительное условие первой миссии с лампочками:
        Массив нажатий на кнопку всегда отсортирован по возрастанию
        В массиве нажатия кнопки нет повторяющихся элементов (значит результат всегда должен быть больше 0)
        Количество элементов всегда четное (свет со временем погаснет)
        Минимальная возможная дата - 01.01.1970.
        Максимально возможная дата 9999-12-31

    Во второй миссии серии с лампочками. Я буду стараться немного усложнять каждую последующую задачу.
    Ты уже научился считать продолжительность горения лампочки, или как долго помещение было освещено.
    Теперь добавим еще один параметр - время начала подсчета.
    Это значит, что лампочка продолжает включатся и выключатся, как и раньше. Но теперь, как результат работы функции,
    я хочу не просто знать, как долго было светло в комнате, а как долго комната была освещена,
    начиная с определенного момента.
    Добавляется еще один аргумент – start_watching, и если он не передан, считаем,
    как и в предыдущей версии программы, за весь период.

    Это третья миссия из серии о лампочках, я хочу выделить отдельно процесс,
    а отдельно период наблюдения за этим процессом. В предыдущей миссии был введен параметр start_watching,
    а в этой – end_watching, который указывает время окончания наблюдения. Если он не передан, миссия работает,
    как и в предыдущей версии, без ограничения времени наблюдения. Еще одно изменение в том, что количество
    элементов (нажатий на кнопку) может быть нечетным (в предыдущей миссии серии - количество элементов всего
    было четным).
"""
from datetime import datetime
from typing import List, Optional


def sum_light(els: List[datetime], start_watching: Optional[datetime] = None, end_watching: Optional[datetime] = None) -> int:
    if not end_watching:  # если нет времени окончания подсчета
        if not start_watching:  # если нет времени начала подсчета
            a = 0  # аргумент на вывод
            for i in range(0, len(els), 2):  # пробежка по els от нуля до конца с шагом 2
                a += (els[i + 1] - els[i]).total_seconds()  # от старшего отнимаем меншее.вытягиваем с этого объекта секунды
            return int(a)  # преврящает число внутри скобок, в целое. и отправляем получателю
        else:  # есть время подсчета
            a = 0  # аргумент на вывод
            for i in range(0, len(els), 2):  # пробежка по els от нуля до конца с шагом 2
                if els[i + 1] > start_watching and els[i] > start_watching:  # если первый и второй аргументы больше старта
                    a += (els[i + 1] - els[i]).total_seconds()  # от старшего отнимаем меншее.вытягиваем секунды
                elif els[i + 1] > start_watching >= els[i]:  # если старт между аргументами
                    a += (els[i + 1] - start_watching).total_seconds()  # от старшего отнимаем стартовое.вытягиваем секунды
            return int(a)  # преврящает число внутри скобок, в целое. и отправляем получателю
    else:  # есть время окончания подсчета
        a = 0  # для хранения в себе информации о включенной лампе, в данном диапазоне времени
        for i in range(0, len(els), 1):  # пробежка по els от нуля до конца с шагом 1
            if i % 2 == 0:  # при четной позиции лампа включается
                if start_watching < els[i] < end_watching and i == len(els) - 1:  # если временная позиция между, и она последняя
                    a += (end_watching - els[i]).total_seconds()  # записываем результат в секундах
                elif i == len(els) - 1 and start_watching > els[i] and end_watching > els[i]:  # если поз последняя и (старт и финиш больше этой позиции)
                    a += (end_watching - start_watching).total_seconds()  # записываем результат в секундах
            else:  # при нечетной лампа выключается
                if start_watching < els[i] < end_watching and start_watching < els[i-1]:  # время между маркерами, и пред поз больше стартового маркера
                    a += (els[i] - els[i-1]).total_seconds()  # записываем результат в секундах
                elif start_watching < els[i] < end_watching and start_watching > els[i-1]:  # время между маркерами, и пред поз меньше стартового маркера
                    a += (els[i] - start_watching).total_seconds()  # записываем результат в секундах
                elif end_watching < els[i] and start_watching < els[i-1] and end_watching > els[i-1]:  # позиция больше финишного маркера, пред поз больше стартового маркера, и финиш больше пред поз
                    a += (end_watching - els[i-1]).total_seconds()  # записываем результат в секундах
                elif (end_watching < els[i] and els[i-1] < start_watching) or \
                        (end_watching == els[i] and start_watching == els[i-1]) or \
                        (end_watching < els[i] and els[i-1] == start_watching) or \
                        (end_watching == els[i] and els[i-1] < start_watching):  # (отрезок с обеих строн вылазит за мпромежуток маркеров) или (если позиции совпадают с маркерами) или (если поз больше финиша и пред поз равна стартовому) или (поз = финишу и старт больше пред поз)
                    a += (end_watching - start_watching).total_seconds()  # записываем результат в секундах
        return int(a)  # преврящает число внутри скобок, в целое. и отправляем получателю


if __name__ == '__main__':
    print("Пример:")
    print(sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 0, 10)],
                    datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 0, 10)))

    assert sum_light(els=[datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 0, 10)],
                     start_watching=datetime(2015, 1, 12, 10, 0, 0),
                     end_watching=datetime(2015, 1, 12, 10, 0, 10)) == 10
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 0, 10)],
                     datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 0, 7)) == 7
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 0, 10)],
                     datetime(2015, 1, 12, 10, 0, 3), datetime(2015, 1, 12, 10, 0, 10)) == 7
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 0, 10)],
                     datetime(2015, 1, 12, 10, 0, 10), datetime(2015, 1, 12, 10, 0, 20)) == 0
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0), datetime(2015, 1, 12, 11, 10, 10)],
                     datetime(2015, 1, 12, 10, 30, 0), datetime(2015, 1, 12, 11, 0, 0)) == 0
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0), datetime(2015, 1, 12, 11, 10, 10)],
                     datetime(2015, 1, 12, 10, 10, 0), datetime(2015, 1, 12, 11, 0, 0)) == 10
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0), datetime(2015, 1, 12, 11, 10, 10)],
                     datetime(2015, 1, 12, 10, 10, 0), datetime(2015, 1, 12, 11, 0, 10)) == 20
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0), datetime(2015, 1, 12, 11, 10, 10)],
                     datetime(2015, 1, 12, 9, 50, 0), datetime(2015, 1, 12, 10, 0, 10)) == 10
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0), datetime(2015, 1, 12, 11, 10, 10)],
                     datetime(2015, 1, 12, 9, 0, 0), datetime(2015, 1, 12, 10, 5, 0)) == 300
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0), datetime(2015, 1, 12, 11, 10, 10)],
                     datetime(2015, 1, 12, 11, 5, 0), datetime(2015, 1, 12, 12, 0, 0)) == 310
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0)], datetime(2015, 1, 12, 11, 5, 0),
                     datetime(2015, 1, 12, 11, 10, 0)) == 300
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0)], datetime(2015, 1, 12, 10, 10, 0),
                     datetime(2015, 1, 12, 11, 0, 10)) == 20
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0), datetime(2015, 1, 12, 10, 10, 10),
                      datetime(2015, 1, 12, 11, 0, 0)], datetime(2015, 1, 12, 9, 10, 0),
                     datetime(2015, 1, 12, 10, 20, 20)) == 610
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0)], datetime(2015, 1, 12, 9, 10, 0),
                     datetime(2015, 1, 12, 10, 20, 20)) == 1220
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0)], datetime(2015, 1, 12, 9, 9, 0),
                     datetime(2015, 1, 12, 10, 0, 0)) == 0
    assert sum_light([datetime(2015, 1, 12, 10, 0, 0)], datetime(2015, 1, 12, 9, 9, 0),
                     datetime(2015, 1, 12, 10, 0, 10)) == 10
    print("Третья миссия серии завершена? Нажмите 'Check', чтобы получить отличные награды!")