def nearest_value(values: set, one: int) -> int:
    """
    Найдите ближайшее значение к переданному.
    Вам даны список значений в виде множества (Set) и значение, относительно
    которого, надо найти ближайшее. Например, мы имеем следующий ряд чисел:
    4, 7, 10, 11, 12, 17. И нам нужно найти ближайшее значение к цифре 9.
    Если отсортировать этот ряд по возрастанию, то слева от 9 будет 7,
    а справа 10. Но 10 - находится ближе, чем 7, значит правильный ответ 10.
    Несколько уточнений:
    - Если 2 числа находятся на одинаковом расстоянии - необходимо выбрать наименьшее из них;
    - Ряд чисел всегда не пустой, т.е. размер >= 1;
    - Переданное значение может быть в этом ряде, а значит оно и является ответом;
    - В ряде могут быть как положительные, так и отрицательные числа, но они всегда целые;
    - Ряд не отсортирован и состоит из уникальных чисел.
    """
    values = sorted(values)  # сортировка
    if one in values:  # если "one" присутствует в "values"
        return one  # вернуть результат
    a = []  # пустой список для значений которые меньше чем "one"
    b = []  # пустой список для значений которые больше чем "one"
    for i in range(0, len(values)):  # пробежка по отсортированному списку
        if values[i] < one:  # если значение в данной позиции меньше чем "one"
            a.append(values[i])  # добавили в список
        else:  # значение больше чем "one"
            b.append(values[i])  # добавить в список
    if len(a) == 0:  # если значений которые меньше чем "one" нету
        return b[0]  # выдать ближайший из списка "b"
    elif len(b) == 0:  # если значений которые больше чем "one" нету
        return a[-1]  # выбать последнее из списка меньших
    elif one - a[-1] == b[0] - one:  # если растояние одинаковое
        return a[-1]  # отдать меньшее по значению
    else:  # растояние разное
        if one - a[-1] < b[0] - one:  # если "a" ближе к "one"  чем "b"
            return a[-1]  # выдать ближайший результат
        else:  # если "b" ближе к "one"  чем "a"
            return b[0]  # выдать ближайший результат


if __name__ == '__main__':
    print("Пример:")
    print(nearest_value([4, 7, 10, 11, 12, 17], 9))

    # Эти "asserts" используются для самопроверки, а не для автоматического тестирования.
    assert nearest_value({4, 7, 10, 11, 12, 17}, 9) == 10
    assert nearest_value({4, 7, 10, 11, 12, 17}, 8) == 7
    assert nearest_value({4, 8, 10, 11, 12, 17}, 9) == 8
    assert nearest_value({4, 9, 10, 11, 12, 17}, 9) == 9
    assert nearest_value({4, 7, 10, 11, 12, 17}, 0) == 4
    assert nearest_value({4, 7, 10, 11, 12, 17}, 100) == 17
    assert nearest_value({5, 10, 8, 12, 89, 100}, 7) == 8
    assert nearest_value({-1, 2, 3}, 0) == -1
    print("Кодирование завершено? Нажмите 'Check', чтобы получить отличные награды!")
