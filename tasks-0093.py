"""
    Ваше задание - пересортировать список, расположив числа в порядке уменьшения их количества в списке.
    Если несколько чисел встречаются одинаково часто - их необходимо расположить в порядке от меньшего к
    большему, вне зависимости от того, в каком порядке они встречаются в исходном списке.
    Например: [5, 2, 4, 1, 1, 1, 3] ==> [1, 1, 1, 2, 3, 4, 5]
"""
from typing import List


def frequency_sorting(numbers: List[int]) -> List[int]:
    a = []  # кортеж в виде словаря
    c = []  # кортеж в виде списка
    for i in range(0, len(numbers)):  # пробежка
        a.append([numbers[i], numbers.count(numbers[i])])  # в словарь (значение: количество повторений)
        c.append(numbers.count(numbers[i]))  # в кортеж (количество повторений)
    c = list(set(c))  # удаление повторений (оставить уникальные)
    c = c[::-1]  # перевернуть задом на перед
    e = sorted(list(set(numbers)))  # список уникальностей (отсортированный)
    b = []  # кортеж для подготовки вывода
    for i in range(0, len(c)):  # пробежка, по кортежу из уникальных "повторений" =1  в первом примере
        d = []  # временный кортеж
        for j in range(0, len(a)):  # пробежка, по списку уникальностей "значений" =5 в первом примере
            if a[j][1] == c[i]:  # если позиция словаря говорить что повторяется как позиция из списка с
                d.append(a[j][0])  # добавить в временный кортеж значение
        b.append(sorted(list(set(d))))  # убрать повторения, отсортировать и записать в кортеж
    g = []  # финишный кортеж
    for i in range(0, len(b)):  # пробежка, по кортежу из уникальных "повторений" =1  в первом примере
        for j in range(0, len(b[i])):  # пробежка по контейнеру с значениями
            for h in range(0, c[i]):  # пробежка как количество повторений
                if len(b[i]) > 1:  # если з данным повторением не один элемент
                    g.append(b[i][j])  # записать
                else:  # один элемент с данным повторением
                    g = g + b[i]  # записать
    return g  # выдать


if __name__ == "__main__":
    print("Пример:")
    print(frequency_sorting([3, 4, 11, 13, 11, 4, 4, 7, 3]))

    # Эти "asserts" используются только для самопроверки и не требуются для автоматического тестирования.
    assert frequency_sorting([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], "Уже отсортировано"
    assert frequency_sorting([3, 4, 11, 13, 11, 4, 4, 7, 3]) == [4, 4, 4, 3, 3, 11, 11, 7, 13], "Не отсортировано"
    assert frequency_sorting([99, 99, 55, 55, 21, 21, 10, 10]) == [10, 10, 21, 21, 55, 55, 99, 99], "Обратный"
    print("Кодирование завершено? Нажмите 'Check', чтобы получить отличные награды!")