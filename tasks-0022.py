def days_diff(a, b):
    """
    Сколько вам лет в днях? Это легко вычислить - достаточно вычесть свой день
    рождения от сегодняшнего дня. Мы имеем реальную задачу - посчитать разницу
    между любыми датами.
    У вас есть две даты в кортежах с тремя числами - год, месяц и день.
    Например, 19 апреля 1982 будет (1982, 4, 19). Вы должны найти разницу в
    днях между имеющимися датами. Например, между сегодня и вчера = 1 день.
    Разница между днями всегда будет положительной или нулем, не забывайте
    про абсолютное значение.
    """
    def month(a, b):  # подсчет дней в месяцах, если год один и тот же, а месяца разные
        d = 0  # счетчик для дней
        ob_god = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)  # кортеж для обычного года
        vs_god = (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)  # кортеж для высокосного года
        if a[0] % 4 == 0 and a[0] % 100 != 0 or a[0] % 400 == 0:  # ДЛЯ высокосного года
            if (b[1] - a[1]) == 0 and (b[0] - a[0]) == 0:  # если разница месяцей и годов равна нулю
                d += b[2]-1  # добавляем количество данных дней-1
                return d  # отдаем полученный результат
            d += vs_god[a[1]-1] - a[2]  # дней до конца первого месяца подсчитываемого
            if abs(b[1] - a[1]) == 1:  # если разница месяцей равна одному
                d += b[2]  # суммируем дни до конца первого месяца с днями второго
                return d  # отдаем результат
            elif (b[1] - a[1]) == 0:  # если разница месяцей равна нулю
                return d  # отдаем результат
            else:  # если разница в месяцах от 2 до 11
                for i in range(a[1], b[1] - 1):   # от -1 до 12, b[1]-1 -- не ввесь месяц конечный а его дни
                    d += vs_god[i]  # обычный год, подсчет дней
                return d + b[2]  # отдаем результат
        else:  # ДЛЯ обычного года
            if (b[1] - a[1]) == 0 and (b[0] - a[0]) == 0:  # если разница месяцей и годов равна нулю
                d += b[2]-1  # добавляем количество данных дней-1
                return d  # отдаем полученный результат
            d += ob_god[a[1]-1] - a[2]  # дней до конца первого месяца подсчитываемого
            if abs(b[1] - a[1]) == 1:  # если разница месяцей равна одному
                d += b[2]  # суммируем дни до конца первого месяца с днями второго
                return d  # отдаем результат
            elif (b[1] - a[1]) == 0:  # если разница месяцей равна нулю
                return d  # отдаем результат
            else:  # если разница в месяцах от 2 до 11
                for i in range(a[1], b[1] - 1):   # от -1 до 12, b[1]-1 -- не ввесь месяц конечный а его дни
                    d += ob_god[i]  # обычный год, подсчет дней
                return d + b[2]  # отдаем результат

    def year(a, b):  # подсчет дней с разными годами
        d = 0  # счетчик дней
        s = [a[0], 12, 31]  # создадим последний день в младшем году
        d += month(a, s)+1  # получим, сколько дней до конца младшего года
        n = (a[0]) + 1  # шагатель по годам, со следующего года
        for i in range(a[0] + 1, b[0]):  # пробежка от меньшего+1 к старшему
            if n % 4 == 0 and n % 100 != 0 or n % 400 == 0:  # ЕСЛИ год высокостный
                d += 366  # 366 дней высокосного года
                n += 1  # шагаем дальше
            else:  # обычный год
                d += 365  # 365 дней обычного года
                n += 1  # шагаем дальше
        u = [b[0], 1, 1]  # созданим первый день в последнем году
        d += month(u, b)  # получим все дни
        return d  # отдаем результат

    if a[0] <= b[0]:  # Если а меньше б годами
        pass  # так и оставляем
    else:  # ЕСЛИ а больше б
        a, b = b, a  # меняем местами
    if a[0] == b[0] and a[1] > b[1]:  # если годами равны а месяцами: а меньше либо равно б
        a, b = b, a  # меняем местами
    else:  # ЕСЛИ а больше б
        pass  # так и оставляем
    c = abs(b[0] - a[0])  # разница в годах
    e = b[2] - a[2]  # разница в днях для оного и тогоже года с месяцем
    if c == 0:  # если разница в годах ноль
        if abs(b[1] - a[1]) == 0:  # если разница в месяцах ноль и годах тоже ноль
            return abs(e)  # отдаем разницу в днях, положительную
        else:  # разница в месяцах не ноль а в годах ноль
            return month(a, b)  # переходим в подфункцию подсчета дней в месяцах с одинаковыми годами
    else:  # если разница в годах не ноль
        if (b[1] - a[1]) == 0 and (b[2] - a[2]) == 0:  # если разница в месяцах и днях ноль
            d = 0  # счетчик дней
            n = (a[0])  # шагатель по годам
            for i in range(a[0], b[0]):  # пробежка от меньшего к старшему
                if n % 4 == 0 and n % 100 != 0 or n % 400 == 0:  # ЕСЛИ год высокостный
                    d += 366  # 366 дней высокосного года
                    n += 1  # шагаем дальше
                else:  # обычный год
                    d += 365  # 365 дней обычного года
                    n += 1  # шагаем дальше
            return d  # отдаем четенький подсчет по годам
        else:  # если присутствует разнице по дням и месяцам
            return year(a, b)  # переходим в подфункцию подсчета дней с разными годами


if __name__ == '__main__':
    print("Example:")
    print(days_diff([1, 1, 1], [9999, 12, 31]))  # 3652058
    print(days_diff([1993, 11, 4], [2021, 5, 21]))  # 10060
    print(days_diff([9999, 12, 31], [1, 1, 1]))  # 3652058
    print(days_diff([1970, 1, 1], [2000, 1, 1]))  # 10957
    print(days_diff((2014, 8, 27), (2014, 1, 1)))  # 238
    print(days_diff((2014, 1, 1), (2014, 8, 27)))  # 238
    print(days_diff([6051, 1, 23], [4129, 8, 9]))  # 701798

    # These "asserts" are used for self-checking and not for an auto-testing
    assert days_diff((1982, 4, 19), (1982, 4, 22)) == 3
    assert days_diff((2014, 1, 1), (2014, 8, 27)) == 238
    assert days_diff((2014, 8, 27), (2014, 1, 1)) == 238
    print("Coding complete? Click 'Check' to earn cool rewards!")
